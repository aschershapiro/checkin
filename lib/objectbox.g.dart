// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/day.dart';
import 'models/settings.dart';
import 'models/todoitem.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5527403918121612763),
      name: 'TodoItem',
      lastPropertyId: const IdUid(4, 3395838448309293209),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2349269073575476589),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8201360466034941735),
            name: 'task',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6506014221834692954),
            name: 'dueDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3395838448309293209),
            name: 'status',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5955013199925436597),
      name: 'DayBox',
      lastPropertyId: const IdUid(5, 3486768794814305000),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1394322622962264566),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6556776844641226728),
            name: 'date',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 6202541818411785614)),
        ModelProperty(
            id: const IdUid(4, 4586213457714793877),
            name: 'plusJsonString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3486768794814305000),
            name: 'minusJsonString',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8950029361012055698),
      name: 'Settings',
      lastPropertyId: const IdUid(3, 770571084687439746),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8697491081640398908),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7897454177858843942),
            name: 'serverDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 770571084687439746),
            name: 'boxDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8950029361012055698),
      lastIndexId: const IdUid(1, 6202541818411785614),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3165569036223637437],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TodoItem: EntityDefinition<TodoItem>(
        model: _entities[0],
        toOneRelations: (TodoItem object) => [],
        toManyRelations: (TodoItem object) => {},
        getId: (TodoItem object) => object.id,
        setId: (TodoItem object, int id) {
          object.id = id;
        },
        objectToFB: (TodoItem object, fb.Builder fbb) {
          final taskOffset = fbb.writeString(object.task);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskOffset);
          fbb.addInt64(2, object.dueDate?.millisecondsSinceEpoch);
          fbb.addBool(3, object.status);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dueDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final taskParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dueDateParam = dueDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dueDateValue);
          final object = TodoItem(task: taskParam, dueDate: dueDateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..status =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);

          return object;
        }),
    DayBox: EntityDefinition<DayBox>(
        model: _entities[1],
        toOneRelations: (DayBox object) => [],
        toManyRelations: (DayBox object) => {},
        getId: (DayBox object) => object.id,
        setId: (DayBox object, int id) {
          object.id = id;
        },
        objectToFB: (DayBox object, fb.Builder fbb) {
          final dateOffset = fbb.writeString(object.date);
          final plusJsonStringOffset = fbb.writeString(object.plusJsonString);
          final minusJsonStringOffset = fbb.writeString(object.minusJsonString);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dateOffset);
          fbb.addOffset(3, plusJsonStringOffset);
          fbb.addOffset(4, minusJsonStringOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DayBox()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..date = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..plusJsonString = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..minusJsonString = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');

          return object;
        }),
    Settings: EntityDefinition<Settings>(
        model: _entities[2],
        toOneRelations: (Settings object) => [],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.serverDate.millisecondsSinceEpoch);
          fbb.addInt64(2, object.boxDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Settings()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..serverDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..boxDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TodoItem] entity fields to define ObjectBox queries.
class TodoItem_ {
  /// see [TodoItem.id]
  static final id = QueryIntegerProperty<TodoItem>(_entities[0].properties[0]);

  /// see [TodoItem.task]
  static final task = QueryStringProperty<TodoItem>(_entities[0].properties[1]);

  /// see [TodoItem.dueDate]
  static final dueDate =
      QueryIntegerProperty<TodoItem>(_entities[0].properties[2]);

  /// see [TodoItem.status]
  static final status =
      QueryBooleanProperty<TodoItem>(_entities[0].properties[3]);
}

/// [DayBox] entity fields to define ObjectBox queries.
class DayBox_ {
  /// see [DayBox.id]
  static final id = QueryIntegerProperty<DayBox>(_entities[1].properties[0]);

  /// see [DayBox.date]
  static final date = QueryStringProperty<DayBox>(_entities[1].properties[1]);

  /// see [DayBox.plusJsonString]
  static final plusJsonString =
      QueryStringProperty<DayBox>(_entities[1].properties[2]);

  /// see [DayBox.minusJsonString]
  static final minusJsonString =
      QueryStringProperty<DayBox>(_entities[1].properties[3]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// see [Settings.id]
  static final id = QueryIntegerProperty<Settings>(_entities[2].properties[0]);

  /// see [Settings.serverDate]
  static final serverDate =
      QueryIntegerProperty<Settings>(_entities[2].properties[1]);

  /// see [Settings.boxDate]
  static final boxDate =
      QueryIntegerProperty<Settings>(_entities[2].properties[2]);
}
